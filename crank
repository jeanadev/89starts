#!/usr/bin/perl -w

use strict;
use warnings;

eval 'use Carp::Always'; # Not everyone has it

use Getopt::Long;
use File::Slurp;
use Text::Markdown ();
use Template ();
use Template::Constants qw( :debug :chomp );
use File::Basename;

my $sourcepath = 's';
my $buildpath  = 'build';
my $local;

GetOptions(
    'sourcepath:s' => \$sourcepath,
    'buildpath:s'  => \$buildpath,
    local          => \$local,
) or exit;

-d $buildpath && -w $buildpath or die;

MAIN: {
    my $m = Text::Markdown->new;

    my %tt_defaults = (
        INCLUDE_PATH => [ qw( tt ) ],
        OUTPUT_PATH  => $buildpath,
        DEBUG        => DEBUG_UNDEF,
        TRIM         => CHOMP_ALL,
        PRE_CHOMP    => 1,
        POST_CHOMP   => 1,
        ENCODING     => 'utf8',
    );

    my $tt = Template->new( \%tt_defaults );

    my %default_vars = (
        rfc_1766_lang => 'en',
    );

    my @allpages;
    my @mdfiles = glob( "$sourcepath/*.md" );
    for my $mdfile ( @mdfiles ) {
        my $outfile = basename( $mdfile );
        $outfile =~ s/\.md$/.html/ or die;

        my @source = read_file( $mdfile );
        my $desc = $source[0];
        $desc =~ s/^# // or die "$mdfile doesn't start with a # heading";

        push( @allpages, { desc => $desc, outfile => $outfile } );

        # Convert Markdown to HTML and then process it in the template.
        my $vars = {
            %default_vars,
            body  => $m->markdown( join( '', @source ) ),
            title => $desc,
            base  => $local ? $buildpath : 'http://89starts.com',
        };
        print "$mdfile -> $outfile\n";
        $tt->process( 'page.tt', $vars, $outfile, { binmode => ':encoding(UTF-8)' } )
            || die sprintf( "file: %s\nerror: %s\n", $outfile, $tt->error );
    }
}
